{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","website/view/meme.js","website/view/quotes.js","website/view/main.js","config/routes.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","Meme","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","memes","index","setState","length","Math","floor","random","_this2","fetch","then","results","json","response","console","log","data","react_default","a","createElement","className","src","url","alt","height","width","Button","onClick","handleClick","bind","Quotes","quotes","Quote","getRandomQuote","Main","route","history","push","Container","color","size","block","MainRoute","react_router_dom","react_router","exact","path","component","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98dc80ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"../../static/css/meme.css\";\n\nimport React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\n\nclass Meme extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      memes: [],\n      index: -1, //index is used to select object from the array and is set to -1 because if set to 0 it will have value\n    };\n  }\n\n  handleClick() {\n    this.setState({\n      index:\n        this.state.memes.length === 0\n          ? -1\n          : Math.floor(Math.random() * this.state.memes.length), // to generate a random number in refrence to the array length\n    });\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(results => {\n        return results.json();\n      })\n      .then(response => {\n        console.log(\"check\", response);\n\n        this.setState({\n          memes: response.data.memes,\n          index:\n            response.data.memes.length === 0\n              ? -1\n              : Math.floor(Math.random() * response.data.memes.length), //checking if the fecthed array is empty or not\n        });\n        console.log(\"state\", this.state.memes);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2>Meme</h2>\n        <div>\n          {this.state.index === -1 ? (\n            \"notfound\"\n          ) : (\n            <div className=\"img-container\">\n              <img\n                src={this.state.memes[this.state.index].url}\n                alt=\"loading\"\n                height=\"50%\"\n                width=\"50%\"\n              />\n            </div>\n          )}\n          <Button onClick={this.handleClick.bind(this)} className=\"button\">\n            generate\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Meme;\n","import \"../../static/css/quotes.css\";\n\nimport React, { Component } from \"react\";\nimport { Button } from \"reactstrap\";\nimport Quote from \"inspirational-quotes\";\n\nclass Quotes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: Quote.getRandomQuote(),\n    };\n  }\n\n  handleClick() {\n    console.log(\"quotecheck\", Quote.getRandomQuote());\n    this.setState({\n      quotes: Quote.getRandomQuote(),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2>Quotes</h2>\n        <div className=\"quotes\">{this.state.quotes}</div>\n        <Button onClick={this.handleClick.bind(this)} className=\"button\">\n          Generate\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Quotes;\n","import \"../../static/css/main.css\";\n\nimport React, { Component } from \"react\";\nimport { Container, Button } from \"reactstrap\";\n\nclass Main extends Component {\n  handleClick(route) {\n    this.props.history.push(route);\n  }\n  render() {\n    return (\n      <Container>\n        <Button\n          className=\"button1\"\n          color=\"secondary\"\n          size=\"lg\"\n          block\n          onClick={this.handleClick.bind(this, \"/meme\")} //after onClick request is sent to eventlistener so we have to bind this\n        >\n          Meme Generator\n        </Button>\n\n        <Button\n          className=\"button2\"\n          color=\"secondary\"\n          size=\"lg\"\n          block\n          onClick={this.handleClick.bind(this, \"/quotes\")}\n        >\n          Quote Generator\n        </Button>\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Meme from \"../website/view/meme\";\nimport Quotes from \"../website/view/quotes\";\nimport Main from \"../website/view/main\";\n\nclass MainRoute extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/meme\" component={Meme} />\n          <Route exact path=\"/quotes\" component={Quotes} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default MainRoute;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport MainRoute from \"./config/routes\";\n\nReactDOM.render(<MainRoute />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}